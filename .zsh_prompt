# threshold (sec) for showing cmd exec time
CMD_MAX_EXEC_TIME=5

# vcs_info 設定
autoload -Uz vcs_info
autoload -Uz add-zsh-hook
autoload -Uz is-at-least

# 以下の3つのメッセージをエクスポートする
#   $vcs_info_msg_0_ : 通常メッセージ用 (緑)
#   $vcs_info_msg_1_ : 警告メッセージ用 (黄色)
#   $vcs_info_msg_2_ : エラーメッセージ用 (赤)
zstyle ':vcs_info:*' max-exports 3

zstyle ':vcs_info:*' enable git svn
# 標準のフォーマット(git 以外で使用)
# misc(%m) は通常は空文字列に置き換えられる
zstyle ':vcs_info:*' formats '%s:%b'
zstyle ':vcs_info:*' actionformats '%s:%b' '%m' '<!%a>'
zstyle ':vcs_info:(svn|bzr):*' branchformat '%b:r%r'
zstyle ':vcs_info:bzr:*' use-simple true

if is-at-least 4.3.10; then
  # git 用のフォーマット
  # git のときはステージしているかどうかを表示
  zstyle ':vcs_info:git:*' formats '%s:%b' '%c%u%m'
  zstyle ':vcs_info:git:*' actionformats '%s:%b' '%c%u%m' '<!%a>'
  zstyle ':vcs_info:git:*' check-for-changes true
  zstyle ':vcs_info:git:*' stagedstr " +"  # %c で表示する文字列
  zstyle ':vcs_info:git:*' unstagedstr " -"  # %u で表示する文字列
fi

# hooks 設定
if is-at-least 4.3.11; then
  # git のときはフック関数を設定する

  # formats '(%s)-[%b]' '%c%u %m' , actionformats '(%s)-[%b]' '%c%u %m' '<!%a>'
  # のメッセージを設定する直前のフック関数
  # 今回の設定の場合はformat の時は2つ, actionformats の時は3つメッセージがあるので
  # 各関数が最大3回呼び出される。
  zstyle ':vcs_info:git+set-message:*' hooks \
                      git-hook-begin \
                      git-untracked \
                      git-push-status \
                      git-nomerge-branch \
                      git-stash-count

  # フックの最初の関数
  # git の作業コピーのあるディレクトリのみフック関数を呼び出すようにする
  # (.git ディレクトリ内にいるときは呼び出さない)
  # .git ディレクトリ内では git status --porcelain などがエラーになるため
  function +vi-git-hook-begin() {
  if [[ $(command git rev-parse --is-inside-work-tree 2> /dev/null) != 'true' ]]; then
    # 0以外を返すとそれ以降のフック関数は呼び出されない
    return 1
  fi

  return 0
  }

  # untracked ファイル表示
  #
  # untracked ファイル(バージョン管理されていないファイル)がある場合は
  # unstaged (%u) に ? を表示
  function +vi-git-untracked() {
  # zstyle formats, actionformats の2番目のメッセージのみ対象にする
  if [[ "$1" != "1" ]]; then
    return 0
  fi

  if command git status --porcelain 2> /dev/null \
    | awk '{print $1}' \
    | command grep -F '??' > /dev/null 2>&1 ; then

    # unstaged (%u) に追加
    hook_com[unstaged]+=' ?'
  fi
  }

  # push していないコミットの件数表示
  #
  # リモートリポジトリに push していないコミットの件数を
  # pN という形式で misc (%m) に表示する
  function +vi-git-push-status() {
    # zstyle formats, actionformats の2番目のメッセージのみ対象にする
    if [[ "$1" != "1" ]]; then
      return 0
    fi

    if [[ "${hook_com[branch]}" != "master" ]]; then
      # master ブランチでない場合は何もしない
      return 0
    fi

    # push していないコミット数を取得する
    local ahead
    ahead=$(command git rev-list origin/master..master 2>/dev/null \
      | wc -l \
      | tr -d ' ')

    if [[ "$ahead" -gt 0 ]]; then
      # misc (%m) に追加
      hook_com[misc]+=" push:${ahead}"
    fi
  }

  # マージしていない件数表示
  #
  # master 以外のブランチにいる場合に、
  # 現在のブランチ上でまだ master にマージしていないコミットの件数を
  # (mN) という形式で misc (%m) に表示
  function +vi-git-nomerge-branch() {
    # zstyle formats, actionformats の2番目のメッセージのみ対象にする
    if [[ "$1" != "1" ]]; then
      return 0
    fi

    if [[ "${hook_com[branch]}" == "master" ]]; then
      # master ブランチの場合は何もしない
      return 0
    fi
  }

  # stash 件数表示
  #
  # stash している場合は :SN という形式で misc (%m) に表示
  function +vi-git-stash-count() {
    # zstyle formats, actionformats の2番目のメッセージのみ対象にする
    if [[ "$1" != "1" ]]; then
      return 0
    fi

    local stash
    stash=$(command git stash list 2>/dev/null | wc -l | tr -d ' ')
    if [[ "${stash}" -gt 0 ]]; then
      # misc (%m) に追加
      hook_com[misc]+=" stash:${stash}"
    fi
  }

fi

function _update_prompt_msg() {
  local -a messages
  local prompt="%F{37}%n%f at %F{33}%M%f in %F{3}%~ "

  [[ $UID -eq 0 ]] && prompt="%F{125}%n%f at %F{37}%M%f in %F{33}%~ "

  LANG=ja_JP.UTF-8 vcs_info

  if [[ -n ${vcs_info_msg_0_} ]]; then
    # vcs_info で情報を取得した場合
    # $vcs_info_msg_0_ , $vcs_info_msg_1_ , $vcs_info_msg_2_ を
    # それぞれ緑、黄色、赤で表示する
    [[ -n "$vcs_info_msg_0_" ]] && messages+=("%F{64}${vcs_info_msg_0_}%f")
    [[ -n "$vcs_info_msg_1_" ]] && messages+=("%F{136}${vcs_info_msg_1_}%f")
    [[ -n "$vcs_info_msg_2_" ]] && messages+=("%F{160}${vcs_info_msg_2_}%f")
    prompt+="%fon ${(j::)messages} "
  fi

  local virtualenv=$(echo $VIRTUAL_ENV)

  if [ ! -z ${virtualenv} ]; then
    local venv=$(basename $virtualenv)
    prompt+="%F{240}venv:${venv} "
  fi

  local stop=`date +%s`
  local start=${cmd_timestamp:-$stop}
  let local elapsed=$stop-$start
  local job=`jobs | wc -l | tr -d ' '`

  [ 0 -lt $job ] && prompt+="%F{61}jobs:${job}%f "
  #[ $elapsed -gt $CMD_MAX_EXEC_TIME ] && prompt+="%F{3}time:${elapsed}s%f "
  [ $elapsed -gt $CMD_MAX_EXEC_TIME ] && displaytime $elapsed

  local left="$prompt%F{160}%(?..exited %?)"
  local right="%F{240}\[%D %*\]%f"
  local invisible='%([BSUbfksu]|([FK]|){*})'
  local leftwidth=${#${(S%%)left//$~invisible/}}
  local rightwidth=${#${(S%%)right//$~invisible/}}
  local padwidth=$(($COLUMNS - ($leftwidth + $rightwidth) % $COLUMNS))

  print -P $left${(r:$padwidth:: :)}$right
}

displaytime() {
  local total_seconds=$1
  local days=$(( total_seconds / 60 / 60 / 24 ))
  local hours=$(( total_seconds / 60 / 60 % 24 ))
  local minutes=$(( total_seconds / 60 % 60 ))
  local seconds=$(( total_seconds % 60 ))
  (( days > 0 )) && prompt+="%F{241}${days}d "
  (( hours > 0 )) && prompt+="%F{241}${hours}h "
  (( minutes > 0 )) && prompt+="%F{241}${minutes}m "
  prompt+="%F{241}${seconds}s"
}

function _reset_cmd_timestamp() {
  cmd_timestamp=`date +%s`
}

function precmd() {
  PROMPT="$(_update_prompt_msg)
%(?.%F{64}.%F{160})>%f "
  unset cmd_timestamp
}

add-zsh-hook preexec _reset_cmd_timestamp
